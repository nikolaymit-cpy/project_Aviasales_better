
import logging
import os
import sys
from datetime import date, timedelta, datetime
import requests

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import InvalidToken
from dotenv import load_dotenv

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TRAVELPAYOUTS_API_KEY = os.getenv("TRAVELPAYOUTS_API_KEY")

PARTNER_MARKER = "424310"
PROMO_ID = "telegram_bot"
LEAD = "flights_search"

TRAVELPAYOUTS_API_URL = "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"

CITY_TO_IATA = {
    "–º–æ—Å–∫–≤–∞": "MOW", "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "LED", "–∫–µ–º–µ—Ä–æ–≤–æ": "KEJ",
    "–∫–∏—Ä–æ–≤": "KVX", "–∫–æ—Å—Ç—Ä–æ–º–∞": "KMW", "—á–µ–ª—è–±–∏–Ω—Å–∫": "CEK",
    "—Ç—é–º–µ–Ω—å": "TJM", "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "OVB", "—Ç–æ–º—Å–∫": "TOF",
    "—É—Ñ–∞": "UFA", "–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": "KGD", "–ø–∞—Ä–∏–∂": "PAR",
    "–Ω—å—é-–π–æ—Ä–∫": "NYC", "—Ç–±–∏–ª–∏—Å–∏": "TBS", "–¥—É–±–∞–∏": "DXB",
}


def get_iata_code(city_name):
    return CITY_TO_IATA.get(city_name.lower())


def search_flights(origin_iata, destination_iata, date_str, api_key):
    params = {"origin": origin_iata, "destination": destination_iata, "departure_at": date_str,
              "currency": "RUB", "unique": "false", "token": api_key}
    logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ Travelpayouts API: {TRAVELPAYOUTS_API_URL} (—Ç–æ–∫–µ–Ω —Å–∫—Ä—ã—Ç)")
    try:
        response = requests.get(TRAVELPAYOUTS_API_URL, params=params, timeout=20)
        response.raise_for_status()
        data = response.json()
        if 'data' not in data or not isinstance(data['data'], list):
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {data}")
            return None
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –ù–∞–π–¥–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: {len(data['data'])}")
        return data['data']
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP/–∑–∞–ø—Ä–æ—Å–∞ –∫ Travelpayouts API: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API: {e}", exc_info=True)
        return None


def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|}{.!\\'
    return ''.join(['\\' + char if char in escape_chars else char for char in str(text)])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '‚úàÔ∏è –ü—Ä–∏–≤–µ—Ç\\! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –ø—Ä—è–º—ã—Ö –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤\\.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/flights` –¥–ª—è –ø–æ–∏—Å–∫–∞\\.\n'
        '–ü—Ä–∏–º–µ—Ä: `/flights –ú–æ—Å–∫–≤–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ 28.06.2025` –∏–ª–∏ `/flights –ö–µ–º–µ—Ä–æ–≤–æ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ –∑–∞–≤—Ç—Ä–∞`\n'
        '–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help',
        parse_mode="MarkdownV2"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    cities = ', '.join([c.capitalize() for c in CITY_TO_IATA.keys()])
    await update.message.reply_text(
        '–Ø –∏—â—É *—Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ* —Ä–µ–π—Å—ã\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/flights –ì–æ—Ä–æ–¥1 –ì–æ—Ä–æ–¥2 –î–ê–¢–ê`\n\n'
        '–í –∫–∞—á–µ—Å—Ç–≤–µ `–î–ê–¢–´` –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ `–∑–∞–≤—Ç—Ä–∞` –∏–ª–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì` \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, `25.12.2024`\\)\\.\n\n'
        f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≥–æ—Ä–æ–¥–∞: {escape_markdown_v2(cities)}\\.',
        parse_mode="MarkdownV2"
    )


async def flights(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 3:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/flights –ì–æ—Ä–æ–¥1 –ì–æ—Ä–æ–¥2 –î–ê–¢–ê`",
                                        parse_mode="MarkdownV2")
        return

    origin_city, dest_city, date_input_str = args[0], args[1], args[2]


    target_date = None
    if date_input_str.lower() == "–∑–∞–≤—Ç—Ä–∞":
        target_date = date.today() + timedelta(days=1)
    else:
        try:
            target_date = datetime.strptime(date_input_str, "%d.%m.%Y").date()
            if target_date < date.today():
                await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã\\.",
                                                parse_mode="MarkdownV2")
                return
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–∑–∞–≤—Ç—Ä–∞` –∏–ª–∏ `–î–î.–ú–ú.–ì–ì–ì–ì`\\.",
                                            parse_mode="MarkdownV2")
            return

    date_api_str = target_date.strftime("%Y-%m-%d")
    date_url_str = target_date.strftime("%d%m")
    escaped_display_date = escape_markdown_v2(date_api_str)

    origin_iata, dest_iata = get_iata_code(origin_city), get_iata_code(dest_city)

    if not all([origin_iata, dest_iata]):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≥–æ—Ä–æ–¥–æ–≤\\. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /help\\.",
                                        parse_mode="MarkdownV2")
        return

    await update.message.reply_text(
        f"‚úàÔ∏è –ò—â—É –±–∏–ª–µ—Ç—ã –∏–∑ *{escape_markdown_v2(origin_city)}* –≤ *{escape_markdown_v2(dest_city)}* –Ω–∞ *{escaped_display_date}*\\.\\.\\.",
        parse_mode="MarkdownV2")

    flights_data = search_flights(origin_iata, dest_iata, date_api_str, TRAVELPAYOUTS_API_KEY)

    if flights_data is None or not flights_data:
        await update.message.reply_text(f"–ë–∏–ª–µ—Ç–æ–≤ –Ω–∞ *{escaped_display_date}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\.",
                                        parse_mode="MarkdownV2")
        return

    message = f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –Ω–∞ *{escaped_display_date}*:\n\n"
    sorted_flights = sorted(flights_data, key=lambda x: x.get('price', float('inf')))
    results_count = 0

    for flight in sorted_flights:
        if flight.get('destination') != dest_iata or flight.get('transfers') != 0:
            continue

        if results_count >= 5:
            break

        price = flight.get('price', 'N/A')
        airline = flight.get('airline', 'N/A')
        flight_number = flight.get('flight_number', 'N/A')
        dep_time = 'N/A'
        if flight.get('departure_at'):
            try:
                dep_time = datetime.fromisoformat(flight['departure_at'].replace('Z', '+00:00')).strftime('%H:%M')
            except (ValueError, AttributeError):
                pass

        partner_url = f"https://www.aviasales.ru/search/{origin_iata}{date_url_str}{dest_iata}1?marker={PARTNER_MARKER}"

        message += (
            f"*{results_count + 1}\\. –¶–µ–Ω–∞: {escape_markdown_v2(str(price))} RUB*\n"
            f"  ‚úàÔ∏è {escape_markdown_v2(airline)} \\(–†–µ–π—Å {escape_markdown_v2(str(flight_number))}\\)\n"
            f"  ‚è∞ –í—ã–ª–µ—Ç: {escape_markdown_v2(dep_time)}\n"
            f"  [‚û°Ô∏è –ù–∞–π—Ç–∏ –Ω–∞ Aviasales]({partner_url})\n\n"
        )
        results_count += 1

    if results_count == 0:
        await update.message.reply_text(f"–ü—Ä—è–º—ã—Ö —Ä–µ–π—Å–æ–≤ –Ω–∞ *{escaped_display_date}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.",
                                        parse_mode="MarkdownV2")
        return

    if len(flights_data) > results_count:
        partner_url = f"https://www.aviasales.ru/search/{origin_iata}{date_url_str}{dest_iata}1?marker={PARTNER_MARKER}"
        message += f"_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {results_count} –∏–∑ {len(flights_data)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\\._\n"

    try:
        await update.message.reply_text(message, parse_mode="MarkdownV2", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ MarkdownV2: {e}")


def main():
    if not all([TELEGRAM_BOT_TOKEN, TRAVELPAYOUTS_API_KEY]):
        sys.exit("!!! –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    except InvalidToken:
        sys.exit("!!! –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω Telegram –Ω–µ–≤–µ—Ä–µ–Ω.")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("flights", flights))

    print("\n‚úàÔ∏èü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n")
    application.run_polling()



if __name__ == '__main__':
    main()
